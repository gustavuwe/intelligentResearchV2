// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// "Candidate": {
// 	"id": "c79f6623-2397-4c02-875f-7c44a74eb325",
// 	"name": "Ze lins",
// 	"imgUrl": "www.blog.com.br/ze.png",
// 	"votes": "23",
// 	"researchId": "68d7c0d7-220d-497e-b2ad-1f425552cac2",
// 	"Voters": [],
// 	"Vote": []
// }

//   {
// 	"id": "68d7c0d7-220d-497e-b2ad-1f425552cac2",
// 	"title": "Research 05",
// 	"startDate": "30/07/2024",
// 	"endDate": "31/07/2024",
// 	"candidates": [
// 		{
// 			"id": "asd",
// 			"name": "Candidato A",
// 			"imgUrl": "www.blog.com.br/A.png",
// 			"votes": 23,
// 			"researchId": "68d7c0d7-220d-497e-b2ad-1f425552cac2",
// 			"Voters": [
// 				{
// 					"name": "Gustav Uwe",
// 					"phonenumber": "99828-7178",
// 					"lat": "-27.92732737",
// 					"long": "-23.99871232",
// 					"candidateId": "c79f6623-2397-4c02-875f-7c44a74eb325",
// 					"Vote": []
// 				}
// 			],
// 			"Vote": [
// 				{
// 					"id": "04cb8d4b-940e-4b16-85e9-41a239795acd",
// 					"voter": {
// 					"name": "Gustav Uwe",
// 					"phonenumber": "99828-7178",
// 					"lat": "-27.92732737",
// 					"long": "-23.99871232",
// 					"candidateId": "c79f6623-2397-4c02-875f-7c44a74eb325",
// 					"Vote": []
// 					}
// 				}
// 			]
// 		},
// 		{
// 			"id": "asdb",
// 			"name": "Candidato B",
// 			"imgUrl": "https://www.blog.com.br/B.png",
// 			"votes": 15,
// 			"researchId": "68d7c0d7-220d-497e-b2ad-1f425552cac2",
// 			"Voters": ["Matheus", "Carlos"],
// 			"Vote": ["A", "C"]
// 		}
// 	],
// 	"Vote": []
// }

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Research {
  id         String      @id @default(uuid())
  title      String
  startDate  String
  endDate    String
  candidates Candidate[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Vote       Vote[]
}

model Voter {
  id           String    @id @default(uuid())
  name         String
  phoneNumber  String?
  lat          String
  long         String
  neighborhood String?
  Candidate    Candidate @relation(fields: [candidateId], references: [id])
  candidateId  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Vote         Vote[]
}

model Vote {
  id          String    @id @default(uuid())
  voter       Voter     @relation(fields: [voterId], references: [id])
  voterId     String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  research    Research  @relation(fields: [researchId], references: [id])
  researchId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Candidate {
  id         String    @id @default(uuid())
  name       String    @unique
  imgUrl     String
  votes      Int       @default(0)
  Research   Research? @relation(fields: [researchId], references: [id])
  researchId String?
  Voters     Voter[]
  Vote       Vote[]
}
