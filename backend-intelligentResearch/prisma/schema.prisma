// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
generator dbml {
  provider = "prisma-dbml-generator"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Research {
  id         String      @id @default(uuid())
  title      String
  startDate  String
  endDate    String
  candidates Candidate[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Vote       Vote[]
}

model Voter {
  id          String    @id @default(uuid())
  name        String
  phoneNumber String?
  lat         String
  long        String
  Candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Vote        Vote[]
}

model Vote {
  id          String    @id @default(uuid())
  voter       Voter     @relation(fields: [voterId], references: [id])
  voterId     String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  research    Research  @relation(fields: [researchId], references: [id])
  researchId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Candidate {
  id         String    @id @default(uuid())
  name       String    @unique
  imgUrl     String
  votes      Int       @default(0)
  Research   Research? @relation(fields: [researchId], references: [id])
  researchId String?
  Voters     Voter[]
  Vote       Vote[]
}
