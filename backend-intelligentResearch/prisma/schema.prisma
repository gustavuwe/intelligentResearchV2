generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         String     @id @default(uuid())
  username   String     @unique
  password   String
  role       Role       @default(USER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  researches Research[] @relation("CreatedResearches")
  employees  Employee[] @relation("EmployerEmployees")
  Employee   Employee[]
}

model Employee {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String // id do funcionario
  employer   User     @relation("EmployerEmployees", fields: [employerId], references: [id], onDelete: Cascade) // Relacionamento com o empregador (criador das pesquisas)
  employerId String // id do empregador (criador das pesquisas)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Research {
  id         String      @id @default(uuid())
  title      String
  startDate  String
  endDate    String
  candidates Candidate[]
  creator    User        @relation(fields: [creatorId], references: [id], name: "CreatedResearches", onDelete: Cascade)
  creatorId  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Vote       Vote[]
}

model Voter {
  id          String    @id @default(uuid())
  name        String
  phoneNumber String?
  Candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Vote        Vote[]
}

model Vote {
  id           String    @id @default(uuid())
  voter        Voter     @relation(fields: [voterId], references: [id])
  voterId      String
  candidate    Candidate @relation(fields: [candidateId], references: [id])
  candidateId  String
  research     Research  @relation(fields: [researchId], references: [id])
  researchId   String
  lat          String?
  long         String?
  neighborhood String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Candidate {
  id         String    @id @default(uuid())
  name       String    @unique
  imgUrl     String
  votes      Int       @default(0)
  Research   Research? @relation(fields: [researchId], references: [id])
  researchId String?
  Voters     Voter[]
  Vote       Vote[]
}
